filter(cran,r_version <= "3.0.2",country == "IN")
filter(cran,country == "US",country == "IN")
filter(cran,country == "US"|country == "IN")
filter(cran,size > 100500,r_os=="linux_gnu" )
filter(cran,size > 100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(R.version))
filter(cran,!is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange (cran2,ip_id)
arrange (cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version), ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3,correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(dplyr)
cran <- tbl_df(mydf)
cran
mydf
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
source('/var/folders/52/qy8szhvn5jd23pqjnllxzgl00000gn/T//Rtmpil89gS/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
filter(pack_sum,count>679)
top_counts <- filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
top_counts_sorted <- arrange(top_counts,desc(count))-
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum,unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,value)
res <- gather(students2,sex_class,value,-grade)
res <- gather(students2,sex_class,count,-grade)
res
?separate
separate(res,col=sex_class,into=c("sex,"class""))
separate(res,col=sex_class,into=c("sex,"class"))
separate(res,col=sex_class,into=c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
?mutate
submit()
submit()
students3
s1 <- gather(students, class, grade, class1:class5, na.rm = TRUE)
s1 <- gather(students3, class, grade, class1:class5, na.rm = TRUE)
s1
s1 <- spread(s1,test,grade)
s1
s2 <- mutate(s1,class=parse_numer(class))
s2 <- mutate(s1,class=parse_number(class))
s2
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(passed,failed)
sat
submit
submit()
submit()
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package="lubridate")
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
update(this_moment, hours = 8, minutes = 34, seconds = 55)Ã¹
update(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hour = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this moment <- update("2018-03-14 18:55:43 CET",hour=8)
this_moment <- update("2018-03-14 18:55:43 CET",hour=8)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
f
library(quantmod)
install.packages("quantmod")
library(quantmod)
install.packages("xts")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
names(sampleTimes)
sampleTimes
class(sampleTimes)
library(lubridate)
s <- ymd_hms(sampleTimes)
sampleTimes[1]
ymd(sampleTimes[1])
s<- ymd(sampleTimes[1])
s[y]
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday()
wday(this_day)
bye
bye()
s
year(s)
year(sampleTimes)
y <- year(sampleTimes)
class(y)
sum (y == 2010)
sum (y == 2012)
s1 <- sampleTimes[year(sampleTimes) == 2012]
s1 <- sampleTimes[(year(sampleTimes) == 2012) && (wday(sampleTimes == 2))]
s1 <- sampleTimes[((year(sampleTimes) == 2012) && (wday(sampleTimes == 2)))]
s1 <- sampleTimes[year(sampleTimes) == 2012]
s1
s1 <- sampleTimes[wday(sampleTimes) == 2]
s3 <- sampleTimes[(wday(sampleTimes) == 2) && (year(sampleTimes) == 2012)]
s3
s1 <- sampleTimes[year(sampleTimes) == 2012]
s2 <- s1[wday(s1) == 2]
setwd("~/Dropbox/DS-repo/UCI HAR Dataset")
setwd("test")
getwd()
ls
st <- read.table("subject_test.txt")
st <- read.table("subject_test.txt")
x <- read.table("X_test.txt")
y <- read.table("y_test.txt")
library(dplyr)
sx <- select(x,1:6)
s1 <- cbind(st,y,sx)
head(s1)
names(s1) <- c("subject","activity","m1","m2","m3","m4","m5","m6")
head(s1)
setwd("..")
getwd()
a <- read.table("activity_labels.txt")
a
s1 <- mutate(s1,activity=a$V2[activity])
s1
head(s1)
source('~/Dropbox/DS-repo/UCI HAR Dataset/run_analysis.R')
head(a1)
source('~/Dropbox/DS-repo/UCI HAR Dataset/run_analysis.R')
setwd("~/Dropbox/DS-repo/UCI HAR Dataset")
source('~/Dropbox/DS-repo/UCI HAR Dataset/run_analysis.R')
names(d)
shortf$V2
shortf$V1
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
install.packages("DiagrammeR")
install.packages("DiagrammeR")
install.packages("DiagrammeR")
install.packages("DiagrammeR")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod1 <- train(y~.,method="rf",data=vowel.train)
library(caret)
mod1 <- train(y~.,method="rf",data=vowel.train)
mod2 <- train(y~.,method="rf",data=vowel.train)
mod2 <- train(y~.,method="gbm",data=vowel.train)
pred1 <- predict(mod1,vowel.test)
pred2 <- predict(mod2,vowel.test)
a1 <- sqrt(sum((pred1-vowel.test$y)^2))
table(pred1,vowel.test$y)
table(pred2,vowel.test$y)
mod1$finalModel
library(ElemStatLearn)
data("vowel.train")
data("vowel.test")
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
m1 <- train(y~.,method="rf",data=vowel.train)
m2 <- train(y~.,method="gbm",data=vowel.train)
p1 <- predict(m1,vowel.test)
p2 <- predict(m2,vowel.test)
p1
vowel.test$y
cm1 <- table(vowel.test$y,p1)
cm2 <- table(vowel.test$y,p2)
a1 <- sum(diag(cm1))/sum(cm1)
a1
a2 <- sum(diag(cm2))/sum(cm2)
a2
cmp < table(p1, p2)
cmp <- table(p1, p2)
cmp
ap <- sum(diag(cmp))/sum(cmp)
ap
p3 <- data.frame(p1,p2,y=vowel.test$y)
library(dplyr)
head(p3)
p4 <- mutate(p3,pt = ifelse(p1=p2,p1,-1))
p4 <- mutate(p3,pt = ifelse(p1==p2,p1,-1))
head(p4)
p5 <- select(p4,pt!=-1)
p5 <- filter(p4,pt!=-1)
head(p5)
cmp <- table(p5$pt, p5$y)
ap
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis,p=3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
m1 <- train(diagnosis~.,method="rf",data=training)
m2 <- train(diagnosis~.,method="gbm",data=training)
m3 <- train(diagnosis~.,method="lda",data=training)
p1 <- predict(m1,testing)
p2 <- predict(m2,testing)
p3 <- predict(m3,testing)
pa <- data.frame(p1,p2,p3,y=testing$diagnosis)
a <- data.frame(p1,p2,p3,y=testing$diagnosis)
ma <- train(y~.,method="rf",data=a)
pa <- predict(ma,a)
cmp <- table(pa, testing$diagnosis)
ap <- sum(diag(cmp))/sum(cmp)
ap
cm1 <- table(p1, testing$diagnosis)
a1 <- sum(diag(cm1))/sum(cm1)
a1
cm2 <- table(p2, testing$diagnosis)
a2 <- sum(diag(cm2))/sum(cm2)
a2
cm3 <- table(p3, testing$diagnosis)
a3 <- sum(diag(cm3))/sum(cm3)
a3
set,
set.seed(3523)
library(AppliedPredictiveModeling)
data("concrete")
inTrain=createDataPartition(concrete$CompressiveStrength,p=3/4)[[1]]
training=concrete[inTrain,]
testing=concrete[-inTrain,]
set.seed(233)
m <- train(CompressiveStrength~.,model="lasso",data=training)
p <- predict(m,testing)
install.packages("elasticnet")
library(elasticnet)
head(training)
y <- training[,"CompressiveStrength"]
y <- training[,-"CompressiveStrength"]
y <- training[,1:8]
x <- training[,1:8]
head(x)
y <- training[,"CompressiveStrength"]
head(y)
a <- enet(x,y,lambda = 0)
str(x)
a <- enet(x,y,lambda = 0)
x$Age <- as.numeric(x$Age)
a <- enet(x,y,lambda = 0)
str(x)
x <- as.matrix(x)
a <- enet(x,y,lambda = 0)
plot(a)
set.seed(3523)
library(AppliedPredictiveModeling)
data("concrete")
inTrain = createDataPartition(concrete$CompressiveStrength,p=3/4) [[1]]
training = concrete[inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
head(training)
x <- training[,1:7]
y <- training[,8]
head(x)
x <- training[,1:8]
head(x)
y <- training[,9]
names(y)
head(y)
m <- svm(x,y)
library(e1071)
m <- svm(x,y)
p <- predict(m,testing)
a <- testing[,1:8]
b <- testing[,9]
p <- predict(m,a)
r <- sqrt(sum((p-b)^2))
r
RMSE(p,b)
setwd("~/Dropbox/DS-repo/PML")
train <- read.csv("pml-training.csv")
names(train)
test <- read.csv("pml-testing.csv")
names(test)
test$problem_id
train_belt <- train[,1:45]
names(train_belt)
train_belt <- train[,1:45+160]
col_fil = 1:45
col_fil
col_fil = c(col_fil,160)
col_fil
train_belt = train[,col_fil]
names(train_belt)
library(caret)
mod_belt <- train(classe~.,method="rf",train_belt)
mod_belt <- train(classe~.,method="rf",train_belt,na.action=na.exclude)
mod_belt <- train(classe~.,method="glm",train_belt,na.action=na.exclude)
mod_belt <- train(classe~.,method="rpart",train_belt,na.action=na.exclude)
test_belt <- test[,1:45]
pre_belt <- predict(mod_belt,test_belt)
str(train_belt)
str(test_belt)
test_belt$kurtosis_picth_belt <- as.factor(test_belt$kurtosis_picth_belt)
test_belt$kurtosis_roll_belt <- as.factor(test_belt$kurtosis_roll_belt)
test_belt$kurtosis_yaw_belt <- as.factor(test_belt$kurtosis_yaw_belt)
pre_belt <- predict(mod_belt,test_belt)
test_belt$skewness_roll_belt <- as.factor(test_belt$skewness_roll_belt)
test_belt$skewness_roll_belt.1 <- as.factor(test_belt$skewness_roll_belt.1)
test_belt$skewness_yaw_belt <- as.factor(test_belt$skewness_yaw_belt)
pre_belt <- predict(mod_belt,test_belt)
str(train$max_roll_belt)
str(test$max_roll_belt)
test_belt$max_roll_belt <- as.numeric(test_belt$max_roll_belt)
str(train$max_picth_belt)
test_belt$max_picth_belt <- as.integer(test_belt$max_picth_belt)
str(train$max_yaw_belt)
test_belt$max_yaw_belt <- as.factor(test_belt$max_yaw_belt)
pre_belt <- predict(mod_belt,test_belt)
str(train$min_roll_belt)
test_belt$min_roll_belt <- as.numeric(test_belt$min_roll_belt)
str(train$min_pitch_belt)
test_belt$min_pitch_belt <- as.integer(test_belt$min_pitch_belt)
test_belt$min_yaw_belt <- as.factor(test_belt$min_yaw_belt)
pre_belt <- predict(mod_belt,test_belt)
train$amplitude_roll_belt
str(train$amplitude_roll_belt)
test_belt$amplitude_roll_belt <- as.numeric(test_belt$amplitude_roll_belt)
str(train$amplitude_pitch_belt)
test_belt$amplitude_pitch_belt <- as.integer(test_belt$amplitude_pitch_belt)
str(test_belt$amplitude_yaw_belt)
str(train$amplitude_yaw_belt)
test_belt$amplitude_yaw_belt <- as.factor(test_belt$amplitude_yaw_belt)
pre_belt <- predict(mod_belt,test_belt)
str(train$var_total_accel_belt)
test_belt$var_total_accel_belt <- as.numeric(test_belt$var_total_accel_belt)
str(train$avg_roll_belt)
test_belt$avg_roll_belt <- as.numeric(test_belt$avg_roll_belt)
str(train$stddev_roll_belt)
test_belt$stddev_roll_belt <- as.numeric(test_belt$stddev_roll_belt)
pre_belt <- predict(mod_belt,test_belt)
str(train$var_roll_belt)
test_belt$var_roll_belt <- as.numeric(test_belt$var_roll_belt)
str(train$avg_pitch_belt)
test_belt$avg_pitch_belt <- as.numeric(test_belt$avg_pitch_belt)
str(train$stddev_pitch_belt)
test_belt$stddev_pitch_belt <- as.numeric(test_belt$stddev_pitch_belt)
pre_belt <- predict(mod_belt,test_belt)
str(train$var_pitch_belt)
test_belt$var_pitch_belt <- as.numeric(test_belt$var_pitch_belt)
str(train$avg_yaw_belt)
test_belt$avg_yaw_belt <- as.numeric(test_belt$avg_yaw_belt)
str(train$stddev_yaw_belt)
test_belt$stddev_yaw_belt <- as.numeric(test_belt$stddev_yaw_belt)
pre_belt <- predict(mod_belt,test_belt)
test_belt$var_yaw_belt <- as.numeric(test_belt$var_yaw_belt)
pre_belt <- predict(mod_belt,test_belt)
pre_belt
View(mod_belt)
pre_belt <- predict(mod_belt,newdata=test_belt)
pre_belt
mod_belt$finalModel
head(train$classe
head(train$classe)
pre_belt <- predict(mod_belt,test_belt)
pre_belt
pre_belt <- predict(mod_belt,test_belt[1])
pre_belt <- predict(mod_belt,test_belt[5,])
pre_belt
names(train_belt)
names(test_belt)
modglm <- train(classe~.,method="glm",data=train_belt)
modglm <- train(classe~.,method="glm",data=train_belt,na.action=na.exclude)
modglm <- train(classe~.,method="pca",data=train_belt,na.action=na.exclude)
modbag <- train(classe~.,method="bag",data=train_belt,na.action=na.exclude)
modbag <- train(classe~.,method="rpart",data=train_belt,na.action=na.exclude)
modrpart <- modbag
p <- predict(modrpart,test_belt)
p
str(train$classe)
modbag <- train(classe~.,method="lm",data=train_belt,na.action=na.exclude)
modbag <- train(classe~.,method="glm",data=train_belt,na.action=na.exclude)
warnings()
names(train)
str(train$X)
str(test$X)
head(test)
str(train)
str(test)
str(test$kurtosis_picth_arm)
View(test)
col_remove <- c(12:36,40)
col_remove
col_remove <- c(12:36,50:59,69:83,87:101,103:112,125:139,141:150)
test_short <- test[,-col_remove]
dim(test_short)
train_short <- train[,-col_remove]
dim(train_short)
mod1 <- train(classe~.,method="rpart",train)
mod1 <- train(classe~.,method="rpart",train,na.action=na.exclude)
train_short2 <- train_short[1:1000,]
mod1 <- train(classe~.,method="rpart",train_short,na.action=na.exclude)
pre1 <- predict(mod1,test)
pre1
dim(pre1)
mod2 <- train(classe~.,method="rf",train_short,na.action=na.exclude)
mod2 <- train(classe~.,method="rf",train_short,na.action=na.exclude)
pre2 <- predict(mod2,test)
pre2
head(train_short)
tail(train)
tail(train_short)
names(test)
names(test_short)
test_short2 <- test_short[,-"problem_id"]
test_short2 <- test_short[,-"problem_id"]
test_short2 <- test_short[,-60]
mod1 <- train(classe~.,method="rpart",train_short)
pre3 <- (mod1,test_short2)
pre3 <- predict(mod1,test_short2)
pre3
